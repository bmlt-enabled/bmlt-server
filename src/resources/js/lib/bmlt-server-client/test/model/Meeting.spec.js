/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Bmlt);
  }
}(this, function(expect, Bmlt) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Bmlt.Meeting();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Meeting', function() {
    it('should create an instance of Meeting', function() {
      // uncomment below and update the code to test Meeting
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be.a(Bmlt.Meeting);
    });

    it('should have the property serviceBodyId (base name: "serviceBodyId")', function() {
      // uncomment below and update the code to test the property serviceBodyId
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property formatIds (base name: "formatIds")', function() {
      // uncomment below and update the code to test the property formatIds
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property venueType (base name: "venueType")', function() {
      // uncomment below and update the code to test the property venueType
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property temporarilyVirtual (base name: "temporarilyVirtual")', function() {
      // uncomment below and update the code to test the property temporarilyVirtual
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property day (base name: "day")', function() {
      // uncomment below and update the code to test the property day
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "timeZone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property published (base name: "published")', function() {
      // uncomment below and update the code to test the property published
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property worldId (base name: "worldId")', function() {
      // uncomment below and update the code to test the property worldId
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationText (base name: "location_text")', function() {
      // uncomment below and update the code to test the property locationText
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationInfo (base name: "location_info")', function() {
      // uncomment below and update the code to test the property locationInfo
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationStreet (base name: "location_street")', function() {
      // uncomment below and update the code to test the property locationStreet
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationNeighborhood (base name: "location_neighborhood")', function() {
      // uncomment below and update the code to test the property locationNeighborhood
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationCitySubsection (base name: "location_city_subsection")', function() {
      // uncomment below and update the code to test the property locationCitySubsection
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationMunicipality (base name: "location_municipality")', function() {
      // uncomment below and update the code to test the property locationMunicipality
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationSubProvince (base name: "location_sub_province")', function() {
      // uncomment below and update the code to test the property locationSubProvince
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationProvince (base name: "location_province")', function() {
      // uncomment below and update the code to test the property locationProvince
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationPostalCode1 (base name: "location_postal_code_1")', function() {
      // uncomment below and update the code to test the property locationPostalCode1
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property locationNation (base name: "location_nation")', function() {
      // uncomment below and update the code to test the property locationNation
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property phoneMeetingNumber (base name: "phone_meeting_number")', function() {
      // uncomment below and update the code to test the property phoneMeetingNumber
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property virtualMeetingLink (base name: "virtual_meeting_link")', function() {
      // uncomment below and update the code to test the property virtualMeetingLink
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property virtualMeetingAdditionalInfo (base name: "virtual_meeting_additional_info")', function() {
      // uncomment below and update the code to test the property virtualMeetingAdditionalInfo
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property contactName1 (base name: "contact_name_1")', function() {
      // uncomment below and update the code to test the property contactName1
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property contactName2 (base name: "contact_name_2")', function() {
      // uncomment below and update the code to test the property contactName2
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property contactPhone1 (base name: "contact_phone_1")', function() {
      // uncomment below and update the code to test the property contactPhone1
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property contactPhone2 (base name: "contact_phone_2")', function() {
      // uncomment below and update the code to test the property contactPhone2
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property contactEmail1 (base name: "contact_email_1")', function() {
      // uncomment below and update the code to test the property contactEmail1
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property contactEmail2 (base name: "contact_email_2")', function() {
      // uncomment below and update the code to test the property contactEmail2
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property busLines (base name: "bus_lines")', function() {
      // uncomment below and update the code to test the property busLines
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property trainLines (base name: "train_lines")', function() {
      // uncomment below and update the code to test the property trainLines
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property comments (base name: "comments")', function() {
      // uncomment below and update the code to test the property comments
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Bmlt.Meeting();
      //expect(instance).to.be();
    });

  });

}));
